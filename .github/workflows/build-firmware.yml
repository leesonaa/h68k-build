name: Build Custom Firmware

on:
  workflow_dispatch:
    inputs:
      PROFILE:
        description: "指定需要构建的设备"
        required: true
      PACKAGES:
        description: "需要集成的软件包列表"
        required: false
        default: ""
      FILES:
        description: "自定义文件目录"
        required: false
        default: ""
      BIN_DIR:
        description: "输出目录（默认 bin）"
        required: false
        default: "bin"
      EXTRA_IMAGE_NAME:
        description: "附加固件名称"
        required: false
        default: ""
      DISABLED_SERVICES:
        description: "禁用服务（如 dnsmasq）"
        required: false
        default: ""

jobs:
  build:
    name: Build Firmware
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@main

      - name: Install Build Dependencies 
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update && sudo -E apt install -y \
          duf ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
          libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
          ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
          python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
          upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd clang-15 llvm-15 npm jq

      - name: Download latest ImageBuilder
        run: |
          REPO="leesonaa/h68k-build"
          FILE_NAME="immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64.tar.zst.gz"
          echo "🔍 Fetching latest release info for $REPO ..."
          RELEASE_JSON=$(curl -s "https://api.github.com/repos/$REPO/releases/latest")
          ASSET_URL=$(echo "$RELEASE_JSON" | jq -r --arg FILE "$FILE_NAME" '.assets[] | select(.name == $FILE) | .browser_download_url')
          echo "✅ Found download URL: $ASSET_URL"
          curl -L "$ASSET_URL" -o "$FILE_NAME"
          gzip -dc immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64.tar.zst.gz | unzstd | tar -xvf -

      - name: Build Image
        run: |
          cd immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64
          make image \
            PROFILE="${{ github.event.inputs.PROFILE }}" \
            PACKAGES="${{ github.event.inputs.PACKAGES }}" \
            FILES="${{ github.event.inputs.FILES }}" \
            BIN_DIR="${{ github.event.inputs.BIN_DIR }}" \
            EXTRA_IMAGE_NAME="${{ github.event.inputs.EXTRA_IMAGE_NAME }}" \
            DISABLED_SERVICES="${{ github.event.inputs.DISABLED_SERVICES }}"

      - name: Upload Firmware Artifact
        uses: actions/upload-artifact@main
        with:
          name: firmware-${{ github.event.inputs.PROFILE }}-${{ github.run_number }}
          path: ${{ github.event.inputs.BIN_DIR || 'bin' }}
