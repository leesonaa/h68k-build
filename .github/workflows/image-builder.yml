name: Build Openwrt Image

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: "选择要编译的 OpenWrt 源分支或 tag"
        required: true
        default: v24.10.2

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  CONFIG_FILE: default.config
  DIY_SHELL: diy.sh
  TZ: Asia/Shanghai
  SOURCE_REPO: ${{ github.event.inputs.source_repo }}

jobs:
  build-firmware:
    name: Build H68k immortalwrt image
    runs-on: ubuntu-22.04
    outputs:
      kernel_abi: ${{ steps.kernel_info.outputs.kernel_abi }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@main

      - name: Checkout private repo
        uses: actions/checkout@main
        with:
          repository: leesonaa/immortalwrt-h68k
          token: ${{ secrets.GH_TOKEN }}
          path: patch
      
      - name: Init Env
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "$TZ"
      
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update && sudo apt install -y \
          duf ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
          g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
          libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
          ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
          python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
          upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd clang-15 llvm-15 npm jq
      
      - name: Clone source code
        run: |
          duf
          sudo -E chmod -R 777 /mnt
          git clone $REPO_URL /mnt/openwrt
          cd /mnt/openwrt
          git checkout $SOURCE_REPO
          cp /home/runner/work/h68k-build/h68k-build/patch/add.sh .
          bash add.sh
          cp /home/runner/work/h68k-build/h68k-build/patch/001-add-opc-h68k-support.patch package/boot/uboot-rockchip/patches/
      
      - name: Update feeds
        run: cd /mnt/openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd /mnt/openwrt && ./scripts/feeds install -a
            
      - name: Load custom configuration
        run: |
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE /mnt/openwrt/.config
          chmod +x $DIY_SHELL
          cd /mnt/openwrt
          $GITHUB_WORKSPACE/$DIY_SHELL
          
      - name: Make menuconfig
        run: |
            cd /mnt/openwrt
            make defconfig
      
      - name: Check and Push config
        run: |
          [ -e $CONFIG_FILE ] && cp /mnt/openwrt/.config $CONFIG_FILE
          if [ -n "$(git status -s | grep $CONFIG_FILE)" ]; then
            git add $CONFIG_FILE
            git commit -m "update config"
            git push -f
          fi
      
      - name: Compile the firmware
        run: |
          cd /mnt/openwrt
          echo -e "download package"
          make download -j$(nproc)
          echo -e "$(nproc) thread compile"
          make -j$(nproc) V=s
          echo "release=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
      
      - name: Check space usage
        if: (!cancelled())
        run: |
          duf
      
      - name: Get Kernel ABI and Version
        id: kernel_info
        run: |
          if [ ! -f /mnt/openwrt/bin/targets/rockchip/armv8/profiles.json ]; then
            echo "::error::profiles.json not found."
            exit 1
          fi
          
          KERNEL_VERSION=$(jq -r '.linux_kernel.version' /mnt/openwrt/bin/targets/rockchip/armv8/profiles.json)
          VERMAGIC=$(jq -r '.linux_kernel.vermagic' /mnt/openwrt/bin/targets/rockchip/armv8/profiles.json)
          
          if [ -z "$KERNEL_VERSION" ] || [ "$KERNEL_VERSION" == "null" ]; then
            echo "::error::Could not extract Kernel Version from profiles.json, or it was null."
            exit 1
          fi
          
          if [ -z "$VERMAGIC" ] || [ "$VERMAGIC" == "null" ]; then
            echo "::error::Could not extract vermagic from profiles.json, or it was null."
            exit 1
          fi
          
          COMBINED_ABI="${KERNEL_VERSION}-${VERMAGIC}"
          echo "kernel_abi=$COMBINED_ABI" >> $GITHUB_OUTPUT
          echo "Detected Kernel ABI: $COMBINED_ABI"
          
      - name: Upload packages as an artifact
        uses: actions/upload-artifact@main
        if: (!cancelled())
        with:
          name: packages
          path: /mnt/openwrt/bin/targets/rockchip/armv8/packages/*

      - name: Organize firmware files
        if: (!cancelled())
        run: |
          cd /mnt/openwrt/bin/targets/*/*
          rm -rf packages *.buildinfo *.manifest *.bin
          sed -i '/buildinfo/d; /\.bin/d; /\.manifest/d' sha256sums
          for i in `ls` ; do gzip $i; done
          echo "firmware_dir=$PWD" >> "$GITHUB_ENV"
      
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: (!cancelled())
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release }}-H68k-${{ env.SOURCE_REPO }}
          body: |
            ### OpenWrt Image Information

            - Default IP: 192.168.100.1
            - Default WAN: eth3
            - Default Username: root
            - Default Password: none
            - Default WIFI Name: immrotalwrt
            - Default WIFI Password: none

            ### OpenWrt Source Code
            - ${{ env.REPO_URL }}
          files: ${{ env.firmware_dir }}/*

  deploy-packages:
    name: Deploy packages to GitHub Pages
    runs-on: ubuntu-22.04
    needs: build-firmware
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download packages artifact
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./packages

      - name: Clean up temporary files
        run: |
          rm -rf ./packages/tmp
      
      - name: Create directory structure and move files
        run: |
          KERNEL_ABI="${{ needs.build-firmware.outputs.kernel_abi }}"
          if [ -z "$KERNEL_ABI" ] || [ "$KERNEL_ABI" == "null" ]; then
            echo "::error::Kernel ABI variable is empty or 'null'. Cannot deploy packages."
            exit 1
          fi
          echo "Deploying to ABI directory: $KERNEL_ABI"
          
          mkdir -p "./deploy/targets/rockchip/armv8/kmods/$KERNEL_ABI"
          mv ./packages/* "./deploy/targets/rockchip/armv8/kmods/$KERNEL_ABI/"
          
          # Move index.html to the correct root directory for GitHub Pages
          git checkout main -- index.html
          mv index.html ./deploy/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          publish_branch: gh-pages
          keep_files: true
